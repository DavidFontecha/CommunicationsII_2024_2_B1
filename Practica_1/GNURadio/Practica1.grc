options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: Practica1
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: Not titled yet
    window_size: (1000,1000)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [8, 8]
    rotation: 0
    state: enabled

blocks:
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: '32000'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [184, 12]
    rotation: 0
    state: enabled
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nclass blk (gr. sync_block\
      \ ):\n\tdef __init__ ( self ) : # only default arguments here\n\t\tgr. sync_block\
      \ . __init__ (\n\t\t\tself ,\n\t\t\tname =\"Bloque acumulador\", # will show\
      \ up in GRC\n\t\t\tin_sig =[ np. float32 ],\n\t\t\tout_sig =[ np. float32 ]\n\
      \t\t)\n\tdef work (self , input_items , output_items ):\n\t\tx = input_items\
      \ [0] # Senial de entrada .\n\t\ty0 = output_items [0] # Senial acumulada\n\t\
      \ty0 [:] = np. cumsum (x)\n\t\treturn len (y0)\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Bloque acumulador', 'blk', [], [('0', 'float', 1)], [('0', 'float',
      1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 200.0]
    rotation: 0
    state: true
- name: epy_block_1
  id: epy_block
  parameters:
    _source_code: "import numpy as np\nfrom gnuradio import gr\nclass blk (gr.sync_block\
      \ ):\n\tdef __init__ ( self ) : # only default arguments here\n\t\tgr. sync_block.__init__\
      \ (\n\t\t\tself ,\n\t\t\tname =\"Bloque diferenciador\", # will show up in GRC\n\
      \t\t\tin_sig =[ np.float32 ],\n\t\t\tout_sig =[ np.float32 ]\n\t\t)\n\t\tself.acum_anterior\
      \ = 0\n\t\t\n\tdef work (self , input_items , output_items ):\n\t\tx = input_items\
      \ [0] # Senial de entrada .\n\t\ty0 = output_items [0] # Senial acumulada diferencial\n\
      \t\t\n\t\tN = len (x)\n\t\tdiff = np. cumsum (x) - self . acum_anterior\n\t\t\
      self . acum_anterior = diff [N -1]\n\t\ty0 [:] = diff\n\t\treturn len (y0)\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
  states:
    _io_cache: ('Bloque diferenciador', 'blk', [], [('0', 'float', 1)], [('0', 'float',
      1)], '', [])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [576, 248.0]
    rotation: 0
    state: true
connections: []

metadata:
  file_format: 1
  grc_version: 3.9.8.0
